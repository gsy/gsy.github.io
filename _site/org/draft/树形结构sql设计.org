树形结构常常用在分类表示中，比如，企业的上下级部门、栏目结构、商品的分类等。


* 查询都会是什么
  - 给出一个父节点，查询这个父节点下的所有子孙节点
  - 给出一个父节点，查询这个父节点下的所有儿子节点
  - 给出一个子节点，查询它的父节点
  - 给出一个子节点，查询比它高两级的祖先节点
* 结构
  [[/assets/img/tree_structure.png]]
** 设计1-adjancency list
   | id | name   | parent_id |
   |----+--------+-----------|
   |  1 | food   |           |
   |  2 | fruit  |         1 |
   |  3 | meat   |         1 |
   |  4 | red    |         2 |
   |  5 | yellow |         2 |
   |  6 | beef   |         3 |
   |  7 | pork   |         3 |
   |  8 | cherry |         4 |
   |  9 | banana |         5 |
   #+BEGIN_SRC sql 
     CREATE TABLE `test1` (
       `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
       `name` varchar(40) NOT NULL DEFAULT '',
       `parent_id` int(11) DEFAULT NULL,
       PRIMARY KEY (`id`)
     ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

   #+END_SRC

   - 给出父节点food，查询这个父节点下的所有子孙节点
     - 找出第一级儿子节点
     - 遍历第一级儿子节点，找出每个儿子节点的儿子节点
     - 过程类似于广度优先搜索
   - 给出父节点food，查询这个父节点下的所有儿子节点
     #+BEGIN_SRC sql
     select `id`, `name` from test1 where parent_id = 1;
     #+END_SRC     
   - 给出一个子节点meat，查询它的父节点
     #+BEGIN_SRC sql
       select `id`, `name` from test1 where id = (
              select `parent_id` from test1 where id = '3'
       );     
     #+END_SRC
     
   - 给出一个子节点beef，查询比它高两级的祖先节点
     - 逐级往上找父亲节点

** 设计2-Path Enumeration
   | id | name   | parent_id |  path |
   |----+--------+-----------+-------|
   |  1 | food   |           |     1 |
   |  2 | fruit  |         1 |   1-2 |
   |  3 | meat   |         1 |   1-3 |
   |  4 | red    |         2 | 1-2-4 |
   |  5 | yellow |         2 | 1-2-5 |
   |  6 | beef   |         3 | 1-3-6 |
   |  7 | pork   |         3 | 1-3-7 |
   |  8 | cherry |         4 | 1-4-8 |
   |  9 | banana |         5 | 1-5-9 |
   - 给出一个父节点food，查询这个父节点下的所有子孙节点
     #+BEGIN_SRC sql
       select id, name from test2 where path like '1-%';            
     #+END_SRC
*** 优点
    - 保存了路径，可以根据父节点查找子节点，也可以根据子节点方便的找上级节点
    - 可以找到当前节点的所有父节点


* 参考链接
  http://www.sitepoint.com/hierarchical-data-database/
