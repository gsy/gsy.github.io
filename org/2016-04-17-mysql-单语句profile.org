#+BEGIN_HTML
---
layout: post
title: Mysql-单语句Profile
---
#+END_HTML
#+OPTIONS: toc:nil
当定位到慢查询时，还需要工具去查看到底在整个查询中发生了什么，以便有目的地优化。

* sample数据库
  sakila是mysql提供的一个测试数据库，书籍、报告中关于mysql方面的例子都可以使用这个数据库，方便交流。
** sakila数据库安装
   - 到[[https://dev.mysql.com/doc/index-other.html][sakila下载页面]] 下载压缩包
   - 解压都your_path/sakila-db/目录下
   - 压缩包里面有三个文件
     - sakila-schema.sql
       包含创建表结构的sql语句
     - sakila-data.sql
       包含填充数据的sql语句
     - sakila.mwb
       MySQL Workbench使用的数据模型文件，方便Workbench查看数据库的结构
   - source执行两个sql文件的语句
     - source your_path/sakila-db/sakila-schema.sql
     - source your_path/sakila-db/sakila-data.sql

* 使用 SHOW PROFILE
  show profile是Jeremy Cole贡献给mysql开源社区的剖析工具，可以用来查看sql语句执行过程中消耗的资源。默认状态下，这个工具是关闭的，可以通过服务器变量在会话（连接）级别打开
  #+BEGIN_SRC sh
    mysql> set profiling = 1;
    Query OK, 0 rows affected (0.00 sec)
  #+END_SRC
  下面使用sakila数据库的数据举个例子：
  #+BEGIN_SRC sh
    mysql> select * from sakila.nicer_but_slower_film_list;
  #+END_SRC
  使用show profiles查看结果
  #+BEGIN_SRC sh
    mysql> show profiles;
    +----------+------------+-------------------------------------------------+
    | Query_ID | Duration   | Query                                           |
    +----------+------------+-------------------------------------------------+
    |        1 | 0.08257125 | select * from sakila.nicer_but_slower_film_list |
  #+END_SRC
  可以看到语句的id和执行时间。
  当需要更详细的执行过程的资源消耗时，可以继续下去：
  #+BEGIN_SRC sh
    mysql> show profile for query 1;
    +--------------------------------+----------+
    | Status                         | Duration |
    +--------------------------------+----------+
    | starting                       | 0.000033 |
    | Waiting for query cache lock   | 0.000005 |
    | checking query cache for query | 0.000067 |
    | checking permissions           | 0.000014 |
    | Opening tables                 | 0.000562 |
    | System lock                    | 0.000026 |
    | checking permissions           | 0.000007 |
    | checking permissions           | 0.000004 |
    | checking permissions           | 0.000003 |
    | checking permissions           | 0.000003 |
    | checking permissions           | 0.000490 |
    | optimizing                     | 0.000057 |
    | statistics                     | 0.000103 |
    | preparing                      | 0.000051 |
    | Creating tmp table             | 0.000339 |
    | executing                      | 0.000009 |
    | Copying to tmp table           | 0.053722 |
    | Sorting result                 | 0.006304 |
    | Sending data                   | 0.018384 |
    | removing tmp table             | 0.000368 |
    | Sending data                   | 0.000009 |
    | Waiting for query cache lock   | 0.000003 |
    | Sending data                   | 0.000034 |
    | init                           | 0.000018 |
    | optimizing                     | 0.000005 |
    | statistics                     | 0.000009 |
    | preparing                      | 0.000008 |
    | executing                      | 0.000002 |
    | Sending data                   | 0.001580 |
    | end                            | 0.000005 |
    | query end                      | 0.000014 |
    | closing tables                 | 0.000003 |
    | removing tmp table             | 0.000139 |
    | closing tables                 | 0.000009 |
    | freeing items                  | 0.000011 |
    | removing tmp table             | 0.000006 |
    | freeing items                  | 0.000010 |
    | Waiting for query cache lock   | 0.000003 |
    | freeing items                  | 0.000137 |
    | Waiting for query cache lock   | 0.000005 |
    | freeing items                  | 0.000002 |
    | storing result in query cache  | 0.000004 |
    | logging slow query             | 0.000003 |
    | cleaning up                    | 0.000007 |
    +--------------------------------+----------+
    44 rows in set (0.00 sec)
  #+END_SRC
  这份报告给出的是按照查询执行的过程顺序，每个步骤花费的时间。步骤太多，很难迅速的看出有效的信息，所以，使用脚本分析下。
** SHOW PROFILE的使用脚本
   #+BEGIN_SRC python
     #!/usr/bin/env python
     # encoding: utf-8

     import mysql.connector


     class mysql_backend(object):
         def __init__(self, host, port, user, password, db):
             self._host = host
             self._port = port
             self._user = user
             self._password = password
             self._db = db
             self.conn = None
             self.cursor = None
             
         def connect(self):
             self.conn = mysql.connector.connect(user=self._user, password=self._password, host=self._host, port=self._port, database=self._db)
             self.cursor = self.conn.cursor()

         def execute(self, sql):
             self.cursor.execute(sql)

         def query(self, sql):
             self.cursor.execute(sql)
             return self.cursor.fetchall()

     class Report(object):
         def __init__(self, key, total, calls):
             self.key = key
             self.total = total
             self.calls = calls    

     backend = mysql_backend('192.168.0.102', '3306', 'guang', 'guang.1019', 'sakila')
     backend.connect()
     backend.execute("set profiling = 1;")
     backend.query("select * from sakila.nicer_but_slower_film_list;")
     metrics = backend.query("show profile for query 1;")

     seen = []
     profiles = {}
     total = 0
     for pair in metrics:
         key = pair[0]
         value = pair[1]
         print key, value
         if key in seen:
             report = profiles[key]
             report.total += value
             report.calls += 1
         else:
             seen.append(key)
             profiles[key] = Report(key, value, 1)
         total += value

     def overall(profiles, total):
         lines = profiles.values()
         lines = sorted(lines, key=lambda profile: profile.total)
         for line in lines:
             print line.key, line.total, line.total/ total * 100, line.calls, line.total/line.calls


     overall(profiles, total)
        
   #+END_SRC

* 使用 SHOW STATUS
  show status可以看到mysql中很多计数器的状态。
  先清零，观察下计数器的值。
  #+BEGIN_SRC sh
    mysql> flush status;
    Query OK, 0 rows affected (0.00 sec)

    mysql> show status where Variable_name like 'Handler%' or Variable_name like 'Created%';
    +----------------------------+-------+
    | Variable_name              | Value |
    +----------------------------+-------+
    | Created_tmp_disk_tables    | 0     |
    | Created_tmp_files          | 0     |
    | Created_tmp_tables         | 0     |
    | Handler_commit             | 0     |
    | Handler_delete             | 0     |
    | Handler_discover           | 0     |
    | Handler_prepare            | 0     |
    | Handler_read_first         | 0     |
    | Handler_read_key           | 0     |
    | Handler_read_last          | 0     |
    | Handler_read_next          | 0     |
    | Handler_read_prev          | 0     |
    | Handler_read_rnd           | 0     |
    | Handler_read_rnd_next      | 0     |
    | Handler_rollback           | 0     |
    | Handler_savepoint          | 0     |
    | Handler_savepoint_rollback | 0     |
    | Handler_update             | 0     |
    | Handler_write              | 0     |
    +----------------------------+-------+
  #+END_SRC
  执行语句后再次观察计数器：
  #+BEGIN_SRC sh
    mysql> select * from sakila.nicer_but_slower_film_list;
    mysql> show status where Variable_name like 'Handler%' or Variable_name like 'Created%';
    +----------------------------+-------+
    | Variable_name              | Value |
    +----------------------------+-------+
    | Created_tmp_disk_tables    | 2     |
    | Created_tmp_files          | 0     |
    | Created_tmp_tables         | 3     |
    | Handler_commit             | 1     |
    | Handler_delete             | 0     |
    | Handler_discover           | 0     |
    | Handler_prepare            | 0     |
    | Handler_read_first         | 1     |
    | Handler_read_key           | 7478  |
    | Handler_read_last          | 0     |
    | Handler_read_next          | 6462  |
    | Handler_read_prev          | 0     |
    | Handler_read_rnd           | 5462  |
    | Handler_read_rnd_next      | 6478  |
    | Handler_rollback           | 0     |
    | Handler_savepoint          | 0     |
    | Handler_savepoint_rollback | 0     |
    | Handler_update             | 0     |
    | Handler_write              | 6459  |
    +----------------------------+-------+
  #+END_SRC
  从结果可以看出：
  - 使用了3个临时表，其中两个是磁盘临时表
  - 有很多没有使用索引的读操作（Handler_read_rnd_next)
  

  
  
  
  
  


    
   
