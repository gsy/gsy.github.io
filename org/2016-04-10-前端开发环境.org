#+BEGIN_HTML
---
layout: post
title: 前端开发环境搭建
---
#+END_HTML
#+OPTIONS: toc:nil
搭建一个纯前端的开发环境。

* 工具集
** Jekyll
   静态站点生成器 & server。
** Jade
   一个Node模板工具，用简练的语法来生成html。
   - 生成html
   - 动态代码特性
   - 代码重用，符合DRY原则
*** 安装
    npm不能安装，说是项目重命名为pug了。
    #+BEGIN_SRC sh
    npm install pug --global
    #+END_SRC
    pug项目没有文档，不跟它玩。
    选择python版的jade。
    #+BEGIN_SRC sh
    pip install pyjade
    #+END_SRC
*** 使用
**** 输出
    test.jade
    #+BEGIN_SRC
      !!! 5
      html(lang="en")
       	head
          title= pageTitle
          script(type='text/javascript')
            if (foo) {
               bar()
            }
       	body
          h1.title Jade - node template engine
          #container
            if youAreUsingJade
              p You are amazing
            else
              p Get on it!
    #+END_SRC
    语法跟python很像。然后输出成html：
    #+BEGIN_SRC sh
    pyjade -c html -o test.html test.jade
    #+END_SRC
**** 更多例子
     见jade的文档:[[http://jade-lang.com/reference/][Jade Language Reference]]
     
** Sass
  Css Preprocessor。 
** Autoprefixer
  帮助css添加vender的前缀，数据来源是[[http://caniuse.com/][Can I Use]].
** Browser Sync
  浏览器同步测试工具。
*** 安装
   #+BEGIN_SRC sh
   npm install -g browser-sync
   #+END_SRC  
** Gulp
  自动化构建工具
*** 安装
   #+BEGIN_SRC sh
   npm install -g gulp
   #+END_SRC
*** API文档
   - gulp.src(globs [,options])
     stream的起点，按照匹配模式(glob)或者一组模式(array of globs)，将文件转化成可以piped到其他插件中的对象
   - gulp.dest(path [,options])
     将管道中的数据写入到输出文件夹。
   - gulp.task(name [,deps], fn)
     #+BEGIN_SRC
       gulp.task('mytask', ['array', 'of', 'task', 'names'], function() {
         // 做一些事
       });            
     #+END_SRC
     - name指定需要执行的task名称
     - deps是task执行之前需要完成的tasks
     - fn是回调函数
   - gulp.watch(glob [,opts], tasks)
     监视文件的变动，当发生变动时，执行tasks



** package.json for NPM
  #+BEGIN_QUOTE
  node的工程项目的根目录底下，一般都有一个package.json文件，定义了这个项目需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。
  #+END_QUOTE
  package.json是一个用json格式写的关于项目的各种信息的一个文件，package.json的组成
  - name & version
    name和version构成一个项目的唯一标识。
  - scripts
    指定了运行脚本明德的npm命令行缩写，比如start指定的是运行npm run start时，所要执行的命令。
  - dependencies, devDependencies
    指定的是项目的依赖模块。dependencies指定的是项目运行时依赖的模块，devDependencies指定的是项目开发时依赖的模块。




  

* 脚手架
  我们需要一个符合jekyll工程目录结构，使用gulp做自动化管理，将所有的前端工具都整合到一起的脚手架。是他,是他,就是他,少年英雄,小哪吒:
  [[https://github.com/agragregra/jekyll-gulp-autoprefixer-sass-bourbon-jade-browser-sync][jekyll-gulp-autoprefixer-sass-bourbon-jade-browser-sync]]
** 使用
   - clone项目
   - 进入clone下来的项目的根目录，执行npm install，安装所有package.json指定的需要的模块
   - 终端执行gulp命令
   - 开瓶啤酒庆祝下  
  
  
  
  
